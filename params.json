{"name":"axn","tagline":"listenable actions","body":"# Synopsis\r\n\r\n**axn** is a small (< 1.1 kB minified, ~440 bytes gzipped) implementation of listenable actions or signals in JavaScript.\r\n\r\n[![license - MIT](https://img.shields.io/npm/l/axn.svg)](https://pluma.mit-license.org) [![Dependencies](https://img.shields.io/david/pluma/axn.svg)](https://david-dm.org/pluma/axn)\r\n\r\n[![NPM status](https://nodei.co/npm/axn.png?compact=true)](https://npmjs.org/package/axn)\r\n\r\n[![browser support](https://ci.testling.com/pluma/axn.png)](https://ci.testling.com/pluma/axn)\r\n\r\n[![Build Status](https://img.shields.io/travis/pluma/axn.svg)](https://travis-ci.org/pluma/axn) [![Coverage Status](https://img.shields.io/coveralls/pluma/axn.svg)](https://coveralls.io/r/pluma/axn?branch=master)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install axn\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/axn.git\r\ncd axn\r\nnpm install\r\nnpm run test && npm run dist\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/axn\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With bower\r\n\r\n```sh\r\nbower install axn\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/axn/master/dist/axn.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/axn/master/dist/axn.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As a standalone library\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/pluma/axn/master/dist/axn.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/axn.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `axn` module available in the global namespace.\r\n\r\n# API\r\n\r\n## axn([spec]):Function\r\n\r\nCreates a new action.\r\n\r\nIf `spec` is an object, its properties will be copied to the new action, overwriting its default properties.\r\n\r\n## action(data)\r\n\r\nInvokes the action's listeners with the given `data`.\r\n\r\n## action.listen(fn, [ctx]):Function\r\n\r\nAdds a given function to the action's listeners. If `ctx` is provided, the function will be invoked using it as its `this` context.\r\n\r\nReturns a function that will remove the listener from the action.\r\n\r\n## action.unlisten(fn, [ctx]):Boolean\r\n\r\nRemoves the given function with the given context from the action's listeners.\r\n\r\nReturns `true` if the listener was removed successfully, otherwise returns `false`.\r\n\r\n## action.beforeEmit(data):data\r\n\r\nOverride this function in your action's `spec` to pre-process data passed to the action before it is emitted.\r\n\r\nThe return value will be passed to the action's listeners.\r\n\r\n## action.shouldEmit(data):Boolean\r\n\r\nOverride this function in your action's `spec` to define whether data should be emitted.\r\n\r\nThis function is passed the output of `beforeEmit`. If the function returns `false` or a non-truthy value, the data will not be emitted. Otherwise the action's listeners will be invoked as normally.\r\n\r\n## axn.methods\r\n\r\nAn object containing the default properties that will be copied to new actions.\r\n\r\n# License\r\n\r\nThe MIT/Expat license. For more information, see http://pluma.mit-license.org/ or the accompanying [LICENSE](https://github.com/pluma/axn/blob/master/LICENSE) file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}